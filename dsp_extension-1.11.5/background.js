!function(){"use strict";const e={cycle1:{name:"Standard Parcel",displayName:"Cycle 1 (Standard Parcel)",alarms:[{name:"checkDSP_cycle1_14",hour:14,minute:0},{name:"checkDSP_cycle1_1530",hour:15,minute:30}]},samedayB:{name:"Multi-Use",displayName:"Sameday B (Multi-Use)",alarms:[{name:"checkDSP_samedayB_10",hour:10,minute:0}]},samedayC:{name:"Sameday Parcel",displayName:"Sameday C (Sameday Parcel)",alarms:[{name:"checkDSP_samedayC_1415",hour:14,minute:15}]}},t={serviceTypes:{cycle1:!0,samedayB:!1,samedayC:!1},notificationsEnabled:!0,webhooks:{},schedulingBaseUrl:"",serviceAreaId:""},r={MINUTES_PER_DAY:1440,ALARM_CHECK_INTERVAL:3e5,STORAGE_RETRY_DELAY:1e3,NETWORK_TIMEOUT:3e4,DOM_WAIT_TIMEOUT:1e4},a="manualCheck",s="sendMessage",i="updateNotificationSettings",n="getSettings",o="saveSettings",c="sendSummary",l="testWebhook",h={WEBHOOKS:"webhooks",NOTIFICATIONS_ENABLED:"notificationsEnabled",SERVICE_TYPES:"serviceTypes",SCHEDULING_BASE_URL:"schedulingBaseUrl",SERVICE_AREA_ID:"serviceAreaId",MANIFEST_DATA:"manifestData",BACKBRIEF_DATA:"backbriefData",TEMP_MANIFEST_MAP:"tempManifestMap"},d="NETWORK_ERROR",u="VALIDATION_ERROR",m="ALARM_ERROR";const g=new class{constructor(){this.storage=browser.storage.local,this.cache=new Map,this.cacheExpiry=new Map,this.cacheTTL=3e5}async get(e,t=null){try{if(this.isCacheValid(e))return this.cache.get(e);const r=await this.storage.get(e),a=void 0!==r[e]?r[e]:t;return this.setCache(e,a),a}catch(r){return console.error(`Storage get error for key "${e}":`,r),t}}async getMultiple(e){try{const t=await this.storage.get(e);return e.forEach(e=>{void 0!==t[e]&&this.setCache(e,t[e])}),t}catch(e){return console.error("Storage getMultiple error:",e),{}}}async set(e,t){try{return await this.storage.set({[e]:t}),this.setCache(e,t),!0}catch(t){return console.error(`Storage set error for key "${e}":`,t),!1}}async setMultiple(e){try{return await this.storage.set(e),Object.entries(e).forEach(([e,t])=>{this.setCache(e,t)}),!0}catch(e){return console.error("Storage setMultiple error:",e),!1}}async remove(e){try{return await this.storage.remove(e),this.cache.delete(e),this.cacheExpiry.delete(e),!0}catch(t){return console.error(`Storage remove error for key "${e}":`,t),!1}}async clear(){try{return await this.storage.clear(),this.cache.clear(),this.cacheExpiry.clear(),!0}catch(e){return console.error("Storage clear error:",e),!1}}async getAll(){try{return await this.storage.get(null)}catch(e){return console.error("Storage getAll error:",e),{}}}getWebhooks(){return this.get(h.WEBHOOKS,{})}setWebhooks(e){return this.set(h.WEBHOOKS,e)}getNotificationsEnabled(){return this.get(h.NOTIFICATIONS_ENABLED,t.notificationsEnabled)}setNotificationsEnabled(e){return this.set(h.NOTIFICATIONS_ENABLED,e)}getServiceTypes(){return this.get(h.SERVICE_TYPES,t.serviceTypes)}setServiceTypes(e){return this.set(h.SERVICE_TYPES,e)}getSchedulingBaseUrl(){return this.get(h.SCHEDULING_BASE_URL,t.schedulingBaseUrl)}setSchedulingBaseUrl(e){return this.set(h.SCHEDULING_BASE_URL,e)}getServiceAreaId(){return this.get(h.SERVICE_AREA_ID,t.serviceAreaId)}setServiceAreaId(e){return this.set(h.SERVICE_AREA_ID,e)}setCache(e,t){this.cache.set(e,t),this.cacheExpiry.set(e,Date.now()+this.cacheTTL)}isCacheValid(e){return!(!this.cache.has(e)||!this.cacheExpiry.has(e))&&Date.now()<this.cacheExpiry.get(e)}clearExpiredCache(){const e=Date.now();for(const[t,r]of this.cacheExpiry.entries())e>=r&&(this.cache.delete(t),this.cacheExpiry.delete(t))}async initialize(){try{const e=await this.getAll(),r={};Object.entries(t).forEach(([t,a])=>{const s=h[t.toUpperCase()]||t;void 0===e[s]&&(r[s]=a)}),Object.keys(r).length>0&&await this.setMultiple(r),setInterval(()=>this.clearExpiredCache(),this.cacheTTL)}catch(e){console.error("Storage initialization error:",e)}}};class w extends Error{constructor(e,t,r={}){super(e),this.name=this.constructor.name,this.code=t,this.details=r,this.timestamp=(new Date).toISOString(),Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}toJSON(){return{name:this.name,message:this.message,code:this.code,details:this.details,timestamp:this.timestamp,stack:this.stack}}getUserMessage(){return this.details.userMessage||this.message}}class y extends w{constructor(e,t={}){super(e,d,t)}static fromFetchError(e,t){return new y(`Network request failed for URL: ${e}`,{url:e,originalError:t?.message,userMessage:"Network connection failed. Please check your internet connection and try again."})}static fromWebhookError(e,t,r){return new y(`Webhook request failed: ${t}`,{webhookUrl:e,statusCode:t,originalError:r?.message,userMessage:"Failed to send notification. Please check your webhook configuration."})}}class S extends w{constructor(e,t={}){super(e,u,t)}static fromFieldValidation(e,t,r){return new S(`Validation failed for field "${e}"`,{field:e,value:t,rule:r,userMessage:`Invalid ${e}. Please check the format and try again.`})}static fromMultipleFields(e){const t=e.map(e=>e.field).join(", ");return new S(`Validation failed for fields: ${t}`,{fieldErrors:e,userMessage:"Please correct the highlighted fields and try again."})}}class p extends w{constructor(e,t={}){super(e,m,t)}static fromAlarmCreation(e,t){return new p(`Failed to create alarm: ${e}`,{alarmName:e,originalError:t?.message,userMessage:"Failed to schedule automatic checks. Please try restarting the extension."})}static fromAlarmTrigger(e,t,r){return new p(`Alarm trigger failed: ${e}`,{alarmName:e,serviceType:t,originalError:r?.message,userMessage:"Automatic check failed. You can try running a manual check instead."})}}class f{static logError(e,t=""){const r={context:t,timestamp:(new Date).toISOString(),error:e instanceof w?e.toJSON():{name:e.name,message:e.message,stack:e.stack}};console.error("Extension Error:",r),"undefined"!=typeof window&&window.gtag&&window.gtag("event","exception",{description:e.message,fatal:!1})}static notifyUser(e,t="An unexpected error occurred"){const r=e instanceof w?e.getUserMessage():t;browser?.notifications?.create&&browser.notifications.create({type:"basic",iconUrl:"icons/icon.svg",title:"DSP Extension Error",message:r}).catch(console.error),console.warn("User notification:",r)}static async handleAsyncError(e,t=""){try{return await e}catch(e){throw this.logError(e,t),e}}static createErrorBoundary(e,t=""){return async(...r)=>{try{return await e(...r)}catch(e){throw this.logError(e,t),this.notifyUser(e),e}}}}function E(e,t=""){return f.createErrorBoundary(e,t)}class k{constructor(e,t){this.notificationService=e,this.checkService=t,this.setupEventListeners()}setupEventListeners(){browser.alarms.onAlarm.addListener(E(this.handleAlarm.bind(this),"AlarmManager.handleAlarm"))}async createServiceTypeAlarms(){try{await this.clearAllAlarms();const e=await g.getServiceTypes();for(const[t,r]of Object.entries(e))r&&await this.createAlarmsForServiceType(t)}catch(e){throw p.fromAlarmCreation("service_type_alarms",e)}}async createAlarmsForServiceType(t){const r=e[t];if(r){for(const e of r.alarms)await this.createAlarm(e.name,e.hour,e.minute);r.alarms.length}else console.warn(`No configuration found for service type: ${t}`)}async createAlarm(e,t,a){try{const s=this.calculateNextAlarmTime(t,a);await browser.alarms.create(e,{when:s,periodInMinutes:r.MINUTES_PER_DAY}),t.toString().padStart(2,"0"),a.toString().padStart(2,"0")}catch(t){throw p.fromAlarmCreation(e,t)}}calculateNextAlarmTime(e,t){const r=new Date,a=new Date;return a.setHours(e,t,0,0),a<=r&&a.setDate(a.getDate()+1),a.getTime()}async handleAlarm(e){e.name;try{if(!await g.getNotificationsEnabled())return;const t=this.extractServiceTypeFromAlarm(e.name);if(!t)return void console.warn(`Could not determine service type for alarm: ${e.name}`);await this.checkService.performAutomaticCheck(t,e.name)}catch(t){const r=this.extractServiceTypeFromAlarm(e.name);throw p.fromAlarmTrigger(e.name,r,t)}}extractServiceTypeFromAlarm(e){const t=e.match(/checkDSP_([^_]+)_/);return t?t[1]:null}async clearAllAlarms(){try{await browser.alarms.clearAll()}catch(e){throw p.fromAlarmCreation("clear_all",e)}}async getAllAlarms(){try{return await browser.alarms.getAll()}catch(e){return console.error("Failed to get alarms:",e),[]}}async updateAlarmsForServiceTypes(e){try{await this.clearAllAlarms();for(const[t,r]of Object.entries(e))r&&await this.createAlarmsForServiceType(t)}catch(e){throw p.fromAlarmCreation("update_service_types",e)}}async getNextAlarmTime(e){const t=(await this.getAllAlarms()).filter(t=>t.name.includes(`checkDSP_${e}_`));if(0===t.length)return null;const r=t.reduce((e,t)=>t.scheduledTime<e.scheduledTime?t:e);return new Date(r.scheduledTime)}async testAlarm(e){const t=`test_${e}_${Date.now()}`;try{await browser.alarms.create(t,{when:Date.now()+1e4})}catch(e){throw p.fromAlarmCreation(t,e)}}}class b{constructor(){this.requestQueue=new Map,this.rateLimitMap=new Map}async sendToDSP(e,t,r={}){try{if(!function(e){return!(!e||"string"!=typeof e)&&/^[A-Za-z0-9]{3,6}$/.test(e.trim())}(e))throw S.fromFieldValidation("dspCode",e,"Invalid DSP code format");const a=(await g.getWebhooks())[e];if(!a)return console.warn(`No webhook configured for DSP: ${e}`),!1;if(!function(e){if(!e||"string"!=typeof e)return!1;try{const t=new URL(e);return"https:"===t.protocol&&(t.hostname.includes("hooks.chime.aws")||t.hostname.includes("discord.com")||t.hostname.includes("slack.com"))}catch{return!1}}(a))throw S.fromFieldValidation("webhookUrl",a,"Invalid webhook URL");return await this.sendWebhook(a,t,{...r,dspCode:e})}catch(t){throw console.error(`Failed to send message to ${e}:`,t),t}}async sendToMultipleDSPs(e,t,r={}){const a={successful:[],failed:[],totalSent:0,totalFailed:0},s=await g.getWebhooks(),i=e.filter(e=>{const t=s[e];return t||a.failed.push({dsp:e,error:"No webhook configured"}),t}).map(async e=>{try{await this.sendToDSP(e,t,r)?(a.successful.push(e),a.totalSent++):(a.failed.push({dsp:e,error:"Send failed"}),a.totalFailed++)}catch(t){a.failed.push({dsp:e,error:t.message}),a.totalFailed++}});return await Promise.allSettled(i),a.totalSent,a.totalFailed,a}async sendToAllDSPs(e,t={}){const r=await g.getWebhooks(),a=Object.keys(r);return this.sendToMultipleDSPs(a,e,t)}async sendWebhook(e,t,r={}){const{dspCode:a,title:s="DSP Management Extension",urgent:i=!1}=r;if(this.isRateLimited(e))return console.warn(`Rate limited for webhook: ${e}`),!1;try{const r=this.createWebhookPayload(t,{title:s,dspCode:a,urgent:i,timestamp:(new Date).toISOString()}),n=await this.makeWebhookRequest(e,r);if(this.updateRateLimit(e),n.ok)return!0;throw y.fromWebhookError(e,n.status,new Error(n.statusText))}catch(t){if(t instanceof y)throw t;throw y.fromWebhookError(e,"unknown",t)}}createWebhookPayload(e,t={}){const{title:r,dspCode:a,urgent:s,timestamp:i}=t;return t.webhookUrl?.includes("hooks.chime.aws")?{Content:`**${r}**\n\n${e}\n\n---\n*DSP: ${a||"N/A"} | ${i}*`}:t.webhookUrl?.includes("slack.com")?{text:r,attachments:[{color:s?"danger":"good",fields:[{title:"Message",value:e,short:!1},{title:"DSP Code",value:a||"N/A",short:!0},{title:"Timestamp",value:i,short:!0}]}]}:t.webhookUrl?.includes("discord.com")?{content:`**${r}**`,embeds:[{description:e,color:s?15158332:3066993,fields:[{name:"DSP Code",value:a||"N/A",inline:!0},{name:"Timestamp",value:i,inline:!0}]}]}:{text:`${r}\n\n${e}\n\nDSP: ${a||"N/A"}\nTime: ${i}`}}async makeWebhookRequest(e,t){const a=new AbortController,s=setTimeout(()=>a.abort(),r.NETWORK_TIMEOUT);try{const r=await fetch(e,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t),signal:a.signal});return clearTimeout(s),r}catch(e){throw clearTimeout(s),e}}isRateLimited(e){const t=this.rateLimitMap.get(e);if(!t)return!1;return Date.now()-t<5e3}updateRateLimit(e){this.rateLimitMap.set(e,Date.now()),setTimeout(()=>{this.rateLimitMap.delete(e)},36e5)}async testWebhook(e){try{const t=await this.sendToDSP(e,"🧪 Test message from DSP Management Extension\n\nThis is a test to verify your webhook configuration is working correctly.",{title:"Webhook Test",urgent:!1});return t||console.warn(`⚠️ Webhook test failed for ${e}`),t}catch(t){return console.error(`❌ Webhook test error for ${e}:`,t),!1}}getStatistics(){return{rateLimitedWebhooks:this.rateLimitMap.size,queuedRequests:this.requestQueue.size}}}class A{constructor(){this.webhookSender=new b,this.alarmManager=new k(null,null),this.setupEventListeners(),this.initialize()}async initialize(){try{await g.initialize(),await this.alarmManager.createServiceTypeAlarms()}catch(e){f.logError(e,"BackgroundService.initialize")}}setupEventListeners(){browser.runtime.onInstalled.addListener(E(this.handleInstalled.bind(this),"BackgroundService.handleInstalled")),browser.runtime.onStartup.addListener(E(this.handleStartup.bind(this),"BackgroundService.handleStartup")),browser.runtime.onMessage.addListener(E(this.handleMessage.bind(this),"BackgroundService.handleMessage")),browser.storage.onChanged.addListener(E(this.handleStorageChange.bind(this),"BackgroundService.handleStorageChange"))}async handleInstalled(e){e.reason,"install"===e.reason?await this.handleFirstInstall():"update"===e.reason&&await this.handleUpdate(e.previousVersion)}async handleStartup(){await this.initialize()}async handleFirstInstall(){try{await browser.notifications.create({type:"basic",iconUrl:"icons/icon.svg",title:"DSP Management Extension",message:"Extension installed successfully! Click the extension icon to get started."})}catch(e){console.warn("Could not show welcome notification:",e)}try{await browser.runtime.openOptionsPage()}catch(e){console.warn("Could not open options page:",e)}}async handleUpdate(e){browser.runtime.getManifest().version,await this.performMigration(e),await this.alarmManager.createServiceTypeAlarms()}async handleMessage(e,t,r){e.action,t.tab;try{switch(e.action){case a:return await this.handleManualCheck(e);case s:return await this.handleSendMessage(e);case i:return await this.handleUpdateNotificationSettings(e);case n:return await this.handleGetSettings(e);case o:return await this.handleSaveSettings(e);case c:return await this.handleSendSummary(e);case l:return await this.handleTestWebhook(e);default:return console.warn("Unknown message action:",e.action),{success:!1,error:"Unknown action"}}}catch(t){return f.logError(t,`BackgroundService.handleMessage.${e.action}`),{success:!1,error:t.message}}}async handleStorageChange(e,t){"local"===t&&(Object.keys(e),e.serviceTypes&&await this.alarmManager.updateAlarmsForServiceTypes(e.serviceTypes.newValue),e.notificationsEnabled&&e.notificationsEnabled.newValue)}handleManualCheck(e){return{success:!0,message:"Manual check completed (placeholder)"}}async handleSendMessage(e){const{dsp:t,message:r,targetType:a="individual"}=e;try{let e;switch(a){case"individual":e=await this.webhookSender.sendToDSP(t,r);break;case"multiple":e=await this.webhookSender.sendToMultipleDSPs(t,r);break;case"all":e=await this.webhookSender.sendToAllDSPs(r);break;default:throw new Error(`Unknown target type: ${a}`)}return{success:!0,result:e}}catch(e){return f.logError(e,"BackgroundService.handleSendMessage"),{success:!1,error:e.message}}}async handleUpdateNotificationSettings(e){const{enabled:t}=e;return await g.setNotificationsEnabled(t),{success:!0}}async handleGetSettings(e){try{return{success:!0,settings:{webhooks:await g.getWebhooks(),notificationsEnabled:await g.getNotificationsEnabled(),serviceTypes:await g.getServiceTypes(),schedulingBaseUrl:await g.getSchedulingBaseUrl(),serviceAreaId:await g.getServiceAreaId()}}}catch(e){return f.logError(e,"BackgroundService.handleGetSettings"),{success:!1,error:e.message}}}async handleSaveSettings(e){const{settings:t}=e;try{const e={};return void 0!==t.webhooks&&(e.webhooks=t.webhooks),void 0!==t.notificationsEnabled&&(e.notificationsEnabled=t.notificationsEnabled),void 0!==t.serviceTypes&&(e.serviceTypes=t.serviceTypes),void 0!==t.schedulingBaseUrl&&(e.schedulingBaseUrl=t.schedulingBaseUrl),void 0!==t.serviceAreaId&&(e.serviceAreaId=t.serviceAreaId),await g.setMultiple(e),{success:!0}}catch(e){return f.logError(e,"BackgroundService.handleSaveSettings"),{success:!1,error:e.message}}}handleSendSummary(e){return{success:!0,message:"Summary sent (placeholder)"}}async handleTestWebhook(e){const{dspCode:t,webhookUrl:r}=e;if(!r)return{success:!1,error:"Webhook URL is required"};try{return await this.webhookSender.sendWebhook(r,"🧪 Test message from DSP Management Extension\n\nThis is a verification ping to confirm your webhook is reachable.",{title:"Webhook Test",dspCode:t,urgent:!1}),{success:!0}}catch(e){return f.logError(e,"BackgroundService.handleTestWebhook"),{success:!1,error:e.message}}}performMigration(e){}}new A,"undefined"!=typeof module&&module.exports&&(module.exports={BackgroundService:A})}();
