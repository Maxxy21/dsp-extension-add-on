name: Build and Release Extension

on:
  push:
    branches: [ main ]
    paths:
      - 'extension/**'          # Only trigger on extension changes
      - 'package.json'          # Or package.json changes
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'use_existing'
        type: choice
        options:
          - use_existing
          - patch
          - minor
          - major

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 2

      - name: Check if should release
        id: should_release
        run: |
          # Skip if commit message contains [skip ci] or [no release]
          if git log -1 --pretty=%B | grep -E "\[skip ci\]|\[no release\]"; then
            echo "should_release=false" >> $GITHUB_OUTPUT
            echo "Skipping release due to commit message"
            exit 0
          fi
          
          # Skip if this is an automated commit from GitHub Actions
          if git log -1 --pretty=%B | grep -E "🚀 Release v|Auto-update manifest"; then
            echo "should_release=false" >> $GITHUB_OUTPUT
            echo "Skipping release - this is an automated commit"
            exit 0
          fi
          
          # Check if extension files actually changed
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
          else
            # Only release if extension/ files changed
            if git diff --name-only HEAD~1 HEAD | grep -E "^extension/|^package\.json$"; then
              echo "should_release=true" >> $GITHUB_OUTPUT
              echo "Extension files changed, will create release"
            else
              echo "should_release=false" >> $GITHUB_OUTPUT
              echo "No extension files changed, skipping release"
            fi
          fi

      - name: Setup Node.js
        if: steps.should_release.outputs.should_release == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        if: steps.should_release.outputs.should_release == 'true'
        run: |
          npm install
          npm install -g web-ext

      - name: Determine version
        if: steps.should_release.outputs.should_release == 'true'
        id: version
        run: |
          # Get current version from manifest
          CURRENT_VERSION=$(node -p "require('./extension/manifest.json').version")
          echo "Current version in manifest: $CURRENT_VERSION"
          
          # Check if manual dispatch requested version bump
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.version_type }}" != "use_existing" ]; then
            VERSION_TYPE="${{ github.event.inputs.version_type }}"
            echo "Manual version bump requested: $VERSION_TYPE"
          
            # Calculate new version
            IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
            MAJOR=${VERSION_PARTS[0]}
            MINOR=${VERSION_PARTS[1]}
            PATCH=${VERSION_PARTS[2]}
          
            case $VERSION_TYPE in
              "major")
                MAJOR=$((MAJOR + 1))
                MINOR=0
                PATCH=0
                ;;
              "minor")
                MINOR=$((MINOR + 1))
                PATCH=0
                ;;
              "patch")
                PATCH=$((PATCH + 1))
                ;;
            esac
          
            NEW_VERSION="$MAJOR.$MINOR.$PATCH"
            echo "Calculated new version: $NEW_VERSION"
          
            # Update manifest with new version
            sed -i 's/"version": "[^"]*"/"version": "'$NEW_VERSION'"/' extension/manifest.json
            echo "Updated manifest.json to version $NEW_VERSION"
          
            echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          else
            # Use existing version from manifest (no auto-increment)
            echo "Using existing version: $CURRENT_VERSION"
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Check if release already exists
        if: steps.should_release.outputs.should_release == 'true'
        id: check_release
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          # Check if release already exists
          if gh release view "v$VERSION" >/dev/null 2>&1; then
            echo "Release v$VERSION already exists"
            echo "release_exists=true" >> $GITHUB_OUTPUT
          else
            echo "Release v$VERSION does not exist, proceeding"
            echo "release_exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build extension
        if: steps.should_release.outputs.should_release == 'true' && steps.check_release.outputs.release_exists == 'false'
        run: |
          echo "🔨 Building extension..."
          
          # Create dist directory
          mkdir -p dist
          
          # Create unsigned XPI file first
          cd extension
          zip -r "../dist/dsp-extension-v${{ steps.version.outputs.version }}-unsigned.xpi" . \
            -x "*.log" ".DS_Store" "Thumbs.db" "*.tmp" "manifest-v3.json" "*.sh" "scripts/*"
          cd ..
          
          echo "📦 Created unsigned version"
        id: build

      - name: Sign extension with Mozilla
        if: steps.should_release.outputs.should_release == 'true' && steps.check_release.outputs.release_exists == 'false'
        env:
          WEB_EXT_API_KEY: ${{ secrets.WEB_EXT_API_KEY }}
          WEB_EXT_API_SECRET: ${{ secrets.WEB_EXT_API_SECRET }}
        run: |
          if [ -n "$WEB_EXT_API_KEY" ] && [ -n "$WEB_EXT_API_SECRET" ]; then
            echo "🔏 Signing extension with Mozilla..."
          
            cd extension
            web-ext sign \
              --api-key="$WEB_EXT_API_KEY" \
              --api-secret="$WEB_EXT_API_SECRET" \
              --channel=unlisted \
              --artifacts-dir=../dist \
              --timeout=600000
            cd ..
          
            # Find the signed XPI and rename it
            SIGNED_XPI=$(find dist -name "*.xpi" -not -name "*unsigned*" | head -1)
            if [ -n "$SIGNED_XPI" ]; then
              mv "$SIGNED_XPI" "dist/dsp-extension-v${{ steps.version.outputs.version }}.xpi"
              echo "✅ Extension signed successfully"
          
              # Generate SHA256 hash of signed version
              SHA256=$(sha256sum "dist/dsp-extension-v${{ steps.version.outputs.version }}.xpi" | cut -d' ' -f1)
              echo "SHA256: $SHA256"
              echo "sha256=$SHA256" >> $GITHUB_OUTPUT
            else
              echo "❌ Signed XPI not found, using unsigned version"
              mv "dist/dsp-extension-v${{ steps.version.outputs.version }}-unsigned.xpi" "dist/dsp-extension-v${{ steps.version.outputs.version }}.xpi"
          
              # Generate SHA256 hash of unsigned version
              SHA256=$(sha256sum "dist/dsp-extension-v${{ steps.version.outputs.version }}.xpi" | cut -d' ' -f1)
              echo "SHA256: $SHA256"
              echo "sha256=$SHA256" >> $GITHUB_OUTPUT
            fi
          else
            echo "⚠️ Mozilla API credentials not set, using unsigned version"
            mv "dist/dsp-extension-v${{ steps.version.outputs.version }}-unsigned.xpi" "dist/dsp-extension-v${{ steps.version.outputs.version }}.xpi"
          
            # Generate SHA256 hash
            SHA256=$(sha256sum "dist/dsp-extension-v${{ steps.version.outputs.version }}.xpi" | cut -d' ' -f1)
            echo "SHA256: $SHA256"
            echo "sha256=$SHA256" >> $GITHUB_OUTPUT
          fi
        id: sign

      - name: Create GitHub Release
        if: steps.should_release.outputs.should_release == 'true' && steps.check_release.outputs.release_exists == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🚀 Creating GitHub release..."
          
          # Determine if extension is signed
          if [ -n "${{ secrets.WEB_EXT_API_KEY }}" ] && [ -n "${{ secrets.WEB_EXT_API_SECRET }}" ]; then
            SIGNED_STATUS="✅ Mozilla Signed"
          else
            SIGNED_STATUS="⚠️ Unsigned (requires about:debugging installation)"
          fi
          
          # Create release notes
          cat > release-notes.md << EOF
          ## DSP Management Extension v${{ steps.version.outputs.version }}
          
          ### 📥 Installation
          1. Download the .xpi file below
          2. Open Firefox and go to \`about:addons\`
          3. Click the gear icon ⚙️ and select "Install Add-on From File..."
          4. Choose the downloaded .xpi file
          5. Click "Add" when prompted
          
          ### 🔄 Automatic Updates
          Existing users will receive this update automatically within 24 hours.
          
          ### 📊 Build Information
          - **Version**: ${{ steps.version.outputs.version }}
          - **Status**: $SIGNED_STATUS
          - **SHA256**: \`${{ steps.sign.outputs.sha256 }}\`
          - **Build Date**: $(date -u)
          
          ### 🚀 Changes in this version
          - Enhanced functionality and bug fixes
          - Improved performance and stability
          
          ---
          *This release was automatically generated*
          EOF
          
          # Create the release
          gh release create "v${{ steps.version.outputs.version }}" \
            "dist/dsp-extension-v${{ steps.version.outputs.version }}.xpi" \
            --title "DSP Management Extension v${{ steps.version.outputs.version }}" \
            --notes-file release-notes.md \
            --latest

      - name: Update docs/updates.json
        if: steps.should_release.outputs.should_release == 'true' && steps.check_release.outputs.release_exists == 'false'
        run: |
          echo "📝 Updating updates.json..."
          
          # Ensure docs directory exists
          mkdir -p docs
          
          # Get existing updates or start fresh
          if [ -f "docs/updates.json" ]; then
            # Add new version to existing updates
            node -e "
              const fs = require('fs');
              const updates = JSON.parse(fs.readFileSync('docs/updates.json', 'utf8'));
              const newUpdate = {
                version: '${{ steps.version.outputs.version }}',
                update_link: 'https://github.com/Maxxy21/dsp-extension-hosting/releases/download/v${{ steps.version.outputs.version }}/dsp-extension-v${{ steps.version.outputs.version }}.xpi',
                update_hash: 'sha256:${{ steps.sign.outputs.sha256 }}',
                applications: {
                  gecko: {
                    strict_min_version: '75.0'
                  }
                }
              };
          
              // Remove existing version if present
              updates.addons['dsp-roster-management@maxwell.com'].updates = 
                updates.addons['dsp-roster-management@maxwell.com'].updates.filter(u => u.version !== '${{ steps.version.outputs.version }}');
          
              // Add new version
              updates.addons['dsp-roster-management@maxwell.com'].updates.push(newUpdate);
          
              // Sort by version
              updates.addons['dsp-roster-management@maxwell.com'].updates.sort((a, b) => 
                a.version.localeCompare(b.version, undefined, { numeric: true }));
          
              fs.writeFileSync('docs/updates.json', JSON.stringify(updates, null, 2));
            "
          else
            # Create new updates.json
            cat > docs/updates.json << EOF
          {
            "addons": {
              "dsp-roster-management@maxwell.com": {
                "updates": [
                  {
                    "version": "${{ steps.version.outputs.version }}",
                    "update_link": "https://github.com/Maxxy21/dsp-extension-hosting/releases/download/v${{ steps.version.outputs.version }}/dsp-extension-v${{ steps.version.outputs.version }}.xpi",
                    "update_hash": "sha256:${{ steps.sign.outputs.sha256 }}",
                    "applications": {
                      "gecko": {
                        "strict_min_version": "75.0"
                      }
                    }
                  }
                ]
              }
            }
          }
          EOF
          fi

      - name: Commit and push changes
        if: steps.should_release.outputs.should_release == 'true' && steps.check_release.outputs.release_exists == 'false'
        run: |
          echo "💾 Committing changes..."
          
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Add changes
          git add docs/updates.json
          
          # Only commit manifest if version was bumped
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.version_type }}" != "use_existing" ]; then
            git add extension/manifest.json
          fi
          
          # Commit if there are changes
          if ! git diff --staged --quiet; then
            git commit -m "🚀 Release v${{ steps.version.outputs.version }} [no release]

            - Updated docs/updates.json for auto-updates
            $([ '${{ github.event_name }}' = 'workflow_dispatch' ] && [ '${{ github.event.inputs.version_type }}' != 'use_existing' ] && echo '- Updated manifest.json version')
          
            Auto-generated by GitHub Actions"
          
            git push
          else
            echo "No changes to commit"
          fi

      - name: Deploy to GitHub Pages
        if: steps.should_release.outputs.should_release == 'true' && steps.check_release.outputs.release_exists == 'false'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
          enable_jekyll: false

      - name: Success summary
        if: steps.should_release.outputs.should_release == 'true'
        run: |
          if [ "${{ steps.check_release.outputs.release_exists }}" = "true" ]; then
            echo "ℹ️ Release v${{ steps.version.outputs.version }} already exists, skipped"
          else
            echo "🎉 Release v${{ steps.version.outputs.version }} completed successfully!"
            echo ""
            echo "📦 Release URL: https://github.com/Maxxy21/dsp-extension-hosting/releases/tag/v${{ steps.version.outputs.version }}"
            echo "🌐 Download page: https://maxxy21.github.io/dsp-extension-hosting"
            echo "🔄 Update manifest: https://maxxy21.github.io/dsp-extension-hosting/updates.json"
            echo ""
            echo "Users will receive automatic updates within 24 hours!"
          fi