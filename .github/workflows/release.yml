name: Build and Release Extension

on:
  push:
    branches: [ main ]
    paths:
      - 'extension/**'          # Only trigger on extension changes
      - 'package.json'          # Or package.json changes
      - 'scripts/**'            # Or build script changes
      - 'RELEASE_NOTES.md'      # Or release notes changes
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'use_existing'
        type: choice
        options:
          - use_existing
          - patch
          - minor
          - major

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 2

      - name: Check if should release
        id: should_release
        run: |
          # Skip if commit message contains [skip ci] or [no release]
          if git log -1 --pretty=%B | grep -E "\[skip ci\]|\[no release\]"; then
            echo "should_release=false" >> $GITHUB_OUTPUT
            echo "Skipping release due to commit message"
            exit 0
          fi
          
          # Skip if this is an automated commit from GitHub Actions
          if git log -1 --pretty=%B | grep -E "üöÄ Release v|Auto-update manifest"; then
            echo "should_release=false" >> $GITHUB_OUTPUT
            echo "Skipping release - this is an automated commit"
            exit 0
          fi
          
          # Check if extension files actually changed
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
          else
            # Only release if extension/ files changed
            if git diff --name-only HEAD~1 HEAD | grep -E "^extension/|^package\.json$|^scripts/|^RELEASE_NOTES\.md$"; then
              echo "should_release=true" >> $GITHUB_OUTPUT
              echo "Extension files changed, will create release"
            else
              echo "should_release=false" >> $GITHUB_OUTPUT
              echo "No extension files changed, skipping release"
            fi
          fi

      - name: Setup Node.js
        if: steps.should_release.outputs.should_release == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        if: steps.should_release.outputs.should_release == 'true'
        run: |
          # Check if package-lock.json exists, use npm ci if it does, npm install if not
          if [ -f "package-lock.json" ]; then
            echo "üì¶ Using npm ci (package-lock.json found)"
            npm ci
          else
            echo "üì¶ Using npm install (no package-lock.json found)"
            npm install
          fi
          npm install -g web-ext

      - name: Determine version
        if: steps.should_release.outputs.should_release == 'true'
        id: version
        run: |
          # Get current version from manifest
          CURRENT_VERSION=$(node -p "require('./extension/manifest.json').version")
          echo "Current version in manifest: $CURRENT_VERSION"
          
          # Check if manual dispatch requested version bump
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.version_type }}" != "use_existing" ]; then
            VERSION_TYPE="${{ github.event.inputs.version_type }}"
            echo "Manual version bump requested: $VERSION_TYPE"
            
            # Use npm scripts to bump version
            case $VERSION_TYPE in
              "major")
                npm run version:major
                ;;
              "minor")
                npm run version:minor
                ;;
              "patch")
                npm run version:patch
                ;;
            esac
            
            # Get new version after bump
            NEW_VERSION=$(node -p "require('./extension/manifest.json').version")
            echo "Version bumped to: $NEW_VERSION"
            echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          else
            # Use existing version from manifest (no auto-increment)
            echo "Using existing version: $CURRENT_VERSION"
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Check if release already exists
        if: steps.should_release.outputs.should_release == 'true'
        id: check_release
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          # Check if release already exists
          if gh release view "v$VERSION" >/dev/null 2>&1; then
            echo "Release v$VERSION already exists"
            echo "release_exists=true" >> $GITHUB_OUTPUT
          else
            echo "Release v$VERSION does not exist, proceeding"
            echo "release_exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare release notes
        if: steps.should_release.outputs.should_release == 'true' && steps.check_release.outputs.release_exists == 'false'
        id: release_notes
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          echo "üìù Preparing release notes..."
          
          # Check if custom RELEASE_NOTES.md exists
          if [ -f "RELEASE_NOTES.md" ]; then
            echo "üìã Using custom RELEASE_NOTES.md"
            
            # Extract content for this version or use entire file
            if grep -q "## Version $VERSION" RELEASE_NOTES.md; then
              echo "‚úÖ Found specific notes for version $VERSION"
              # Extract section for this version
              sed -n "/## Version $VERSION/,/## Version \|---$/p" RELEASE_NOTES.md | sed '$ { /^---$/d; }' > temp_release_notes.md
            else
              echo "üìÑ Using entire RELEASE_NOTES.md file"
              # Use the entire file but update version number
              sed "s/## Version [0-9]\+\.[0-9]\+\.[0-9]\+/## DSP Management Extension v$VERSION/" RELEASE_NOTES.md > temp_release_notes.md
            fi
            
            # Ensure it starts with version header
            if ! grep -q "^## DSP Management Extension v$VERSION" temp_release_notes.md; then
              echo "## DSP Management Extension v$VERSION" > final_release_notes.md
              echo "" >> final_release_notes.md
              cat temp_release_notes.md >> final_release_notes.md
            else
              cp temp_release_notes.md final_release_notes.md
            fi
            
            rm -f temp_release_notes.md
            
          else
            echo "üìã RELEASE_NOTES.md not found, generating default release notes"
            
            # Generate default release notes
            cat > final_release_notes.md << EOF
          ## DSP Management Extension v$VERSION
          
          ### üöÄ Changes in this version
          - Enhanced functionality and bug fixes
          - Improved performance and stability
          
          ### üì• Installation
          **Standard Installation:**
          1. Download the .xpi file below
          2. Open Firefox and go to \`about:addons\`
          3. Click the gear icon ‚öôÔ∏è and select "Install Add-on From File..."
          4. Choose the downloaded .xpi file
          5. Click "Add" when prompted
          
          **Development Installation (if unsigned):**
          1. Download the .xpi file below
          2. Go to \`about:debugging\` in Firefox
          3. Click "This Firefox"
          4. Click "Load Temporary Add-on..."
          5. Select the downloaded .xpi file
          
          ### üîÑ Automatic Updates
          Existing users will receive this update automatically within 24 hours.
          
          ### üîß Configuration
          After installation, configure your DSP webhook URLs in the extension settings to receive notifications.
          EOF
          fi
          
          echo "‚úÖ Release notes prepared"
          echo "release_notes_file=final_release_notes.md" >> $GITHUB_OUTPUT

      - name: Build extension with npm
        if: steps.should_release.outputs.should_release == 'true' && steps.check_release.outputs.release_exists == 'false'
        run: |
          echo "üî® Building extension with npm build script..."
          
          # Use your npm build script
          npm run build
          
          # List what was created
          echo "üì¶ Build artifacts:"
          ls -la dist/
          
          # Get the version for filename detection
          VERSION="${{ steps.version.outputs.version }}"
          
          # Check if signed version exists (from your build script)
          if [ -f "dist/dsp-extension-v$VERSION.xpi" ]; then
            echo "‚úÖ Main XPI found: dsp-extension-v$VERSION.xpi"
          fi
          
          # Check if Mozilla-specific version exists
          if [ -f "dist/dsp-extension-v$VERSION-mozilla.xpi" ]; then
            echo "‚úÖ Mozilla XPI found: dsp-extension-v$VERSION-mozilla.xpi"
          fi
          
          # Check if unsigned version exists
          if [ -f "dist/dsp-extension-v$VERSION-unsigned.xpi" ]; then
            echo "üì¶ Unsigned XPI found: dsp-extension-v$VERSION-unsigned.xpi"
          fi
        id: build

      - name: Sign extension with Mozilla
        if: steps.should_release.outputs.should_release == 'true' && steps.check_release.outputs.release_exists == 'false'
        env:
          WEB_EXT_API_KEY: ${{ secrets.WEB_EXT_API_KEY }}
          WEB_EXT_API_SECRET: ${{ secrets.WEB_EXT_API_SECRET }}
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          if [ -n "$WEB_EXT_API_KEY" ] && [ -n "$WEB_EXT_API_SECRET" ]; then
            echo "üîè Signing extension with Mozilla..."
            
            # Use Mozilla-specific version if it exists, otherwise use main version
            if [ -f "dist/dsp-extension-v$VERSION-mozilla.xpi" ]; then
              echo "üì¶ Using Mozilla-specific build for signing"
              
              # Extract the Mozilla version to temp directory for signing
              mkdir -p temp-mozilla
              cd temp-mozilla
              unzip "../dist/dsp-extension-v$VERSION-mozilla.xpi"
              
              # Sign using web-ext
              if web-ext sign \
                --api-key="$WEB_EXT_API_KEY" \
                --api-secret="$WEB_EXT_API_SECRET" \
                --channel=unlisted \
                --artifacts-dir=../dist \
                --timeout=600000; then
                
                echo "‚úÖ Extension signed successfully"
                cd ..
                
                # Find the signed XPI and rename it
                SIGNED_XPI=$(find dist -name "*.xpi" -newer temp-mozilla | head -1)
                if [ -n "$SIGNED_XPI" ]; then
                  mv "$SIGNED_XPI" "dist/dsp-extension-v$VERSION.xpi"
                  echo "üì¶ Signed XPI ready: dsp-extension-v$VERSION.xpi"
                  
                  # Generate SHA256 hash of signed version
                  SHA256=$(sha256sum "dist/dsp-extension-v$VERSION.xpi" | cut -d' ' -f1)
                  echo "üîê SHA256: $SHA256"
                  echo "sha256=$SHA256" >> $GITHUB_OUTPUT
                  echo "signed=true" >> $GITHUB_OUTPUT
                else
                  echo "‚ùå Signed XPI not found after successful signing"
                  # Fallback to unsigned version
                  if [ -f "dist/dsp-extension-v$VERSION-unsigned.xpi" ]; then
                    cp "dist/dsp-extension-v$VERSION-unsigned.xpi" "dist/dsp-extension-v$VERSION.xpi"
                  fi
                  SHA256=$(sha256sum "dist/dsp-extension-v$VERSION.xpi" | cut -d' ' -f1)
                  echo "sha256=$SHA256" >> $GITHUB_OUTPUT
                  echo "signed=false" >> $GITHUB_OUTPUT
                fi
                
                # Clean up
                rm -rf temp-mozilla
              else
                echo "‚ö†Ô∏è Mozilla signing failed, checking if version already exists..."
                cd ..
                rm -rf temp-mozilla
                
                # Use the existing build (could be signed or unsigned)
                if [ -f "dist/dsp-extension-v$VERSION.xpi" ]; then
                  SHA256=$(sha256sum "dist/dsp-extension-v$VERSION.xpi" | cut -d' ' -f1)
                elif [ -f "dist/dsp-extension-v$VERSION-unsigned.xpi" ]; then
                  cp "dist/dsp-extension-v$VERSION-unsigned.xpi" "dist/dsp-extension-v$VERSION.xpi"
                  SHA256=$(sha256sum "dist/dsp-extension-v$VERSION.xpi" | cut -d' ' -f1)
                fi
                
                echo "üîê SHA256: $SHA256"
                echo "sha256=$SHA256" >> $GITHUB_OUTPUT
                echo "signed=mozilla_existing" >> $GITHUB_OUTPUT
                echo "‚ÑπÔ∏è Note: This version may already be signed by Mozilla"
              fi
            else
              echo "üì¶ Using main extension build for signing"
              
              # Extract main version for signing
              mkdir -p temp-signing
              cd temp-signing
              
              if [ -f "../dist/dsp-extension-v$VERSION.xpi" ]; then
                unzip "../dist/dsp-extension-v$VERSION.xpi"
              else
                echo "‚ùå No XPI file found to sign"
                exit 1
              fi
              
              # Sign using web-ext
              web-ext sign \
                --api-key="$WEB_EXT_API_KEY" \
                --api-secret="$WEB_EXT_API_SECRET" \
                --channel=unlisted \
                --artifacts-dir=../dist \
                --timeout=600000
              
              cd ..
              rm -rf temp-signing
              
              # Find and process signed XPI
              SIGNED_XPI=$(find dist -name "*.xpi" -newer . | head -1)
              if [ -n "$SIGNED_XPI" ]; then
                mv "$SIGNED_XPI" "dist/dsp-extension-v$VERSION.xpi"
                SHA256=$(sha256sum "dist/dsp-extension-v$VERSION.xpi" | cut -d' ' -f1)
                echo "sha256=$SHA256" >> $GITHUB_OUTPUT
                echo "signed=true" >> $GITHUB_OUTPUT
              fi
            fi
          else
            echo "‚ö†Ô∏è Mozilla API credentials not set, using existing build"
            
            # Use whatever build exists
            if [ -f "dist/dsp-extension-v$VERSION.xpi" ]; then
              echo "üì¶ Using existing XPI: dsp-extension-v$VERSION.xpi"
            elif [ -f "dist/dsp-extension-v$VERSION-unsigned.xpi" ]; then
              echo "üì¶ Using unsigned XPI"
              cp "dist/dsp-extension-v$VERSION-unsigned.xpi" "dist/dsp-extension-v$VERSION.xpi"
            else
              echo "‚ùå No XPI file found in dist/"
              exit 1
            fi
            
            # Generate SHA256 hash
            SHA256=$(sha256sum "dist/dsp-extension-v$VERSION.xpi" | cut -d' ' -f1)
            echo "üîê SHA256: $SHA256"
            echo "sha256=$SHA256" >> $GITHUB_OUTPUT
            echo "signed=false" >> $GITHUB_OUTPUT
          fi
        id: sign

      - name: Create GitHub Release
        if: steps.should_release.outputs.should_release == 'true' && steps.check_release.outputs.release_exists == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üöÄ Creating GitHub release..."
          
          VERSION="${{ steps.version.outputs.version }}"
          
          # Determine signing status for release notes
          case "${{ steps.sign.outputs.signed }}" in
            "true")
              SIGNED_STATUS="‚úÖ Mozilla Signed (Fresh)"
              ;;
            "mozilla_existing")
              SIGNED_STATUS="‚úÖ Mozilla Signed (Previously)"
              ;;
            "false")
              SIGNED_STATUS="‚ö†Ô∏è Unsigned"
              ;;
            *)
              SIGNED_STATUS="‚ùì Unknown"
              ;;
          esac
          
          # Add build information to the release notes
          cat >> ${{ steps.release_notes.outputs.release_notes_file }} << EOF
          
          ---
          
          ### üìä Build Information
          - **Version**: $VERSION
          - **Status**: $SIGNED_STATUS
          - **SHA256**: \`${{ steps.sign.outputs.sha256 }}\`
          - **Build Date**: $(date -u)
          - **Built with**: NPM build system
          
          ---
          *This release was automatically generated using custom release notes*
          EOF
          
          # Create the release using the prepared notes
          gh release create "v$VERSION" \
            "dist/dsp-extension-v$VERSION.xpi" \
            --title "DSP Management Extension v$VERSION" \
            --notes-file "${{ steps.release_notes.outputs.release_notes_file }}" \
            --latest

      - name: Update docs/updates.json
        if: steps.should_release.outputs.should_release == 'true' && steps.check_release.outputs.release_exists == 'false'
        run: |
          echo "üìù Updating updates.json..."
          
          # Ensure docs directory exists
          mkdir -p docs
          
          # Get existing updates or start fresh
          if [ -f "docs/updates.json" ]; then
            # Add new version to existing updates
            node -e "
              const fs = require('fs');
              const updates = JSON.parse(fs.readFileSync('docs/updates.json', 'utf8'));
              const newUpdate = {
                version: '${{ steps.version.outputs.version }}',
                update_link: 'https://github.com/Maxxy21/dsp-extension-hosting/releases/download/v${{ steps.version.outputs.version }}/dsp-extension-v${{ steps.version.outputs.version }}.xpi',
                update_hash: 'sha256:${{ steps.sign.outputs.sha256 }}',
                applications: {
                  gecko: {
                    strict_min_version: '75.0'
                  }
                }
              };
              
              // Remove existing version if present
              updates.addons['dsp-roster-management@maxwell.com'].updates = 
                updates.addons['dsp-roster-management@maxwell.com'].updates.filter(u => u.version !== '${{ steps.version.outputs.version }}');
              
              // Add new version
              updates.addons['dsp-roster-management@maxwell.com'].updates.push(newUpdate);
              
              // Sort by version
              updates.addons['dsp-roster-management@maxwell.com'].updates.sort((a, b) => 
                a.version.localeCompare(b.version, undefined, { numeric: true }));
              
              fs.writeFileSync('docs/updates.json', JSON.stringify(updates, null, 2));
            "
          else
            # Create new updates.json
            cat > docs/updates.json << EOF
          {
            "addons": {
              "dsp-roster-management@maxwell.com": {
                "updates": [
                  {
                    "version": "${{ steps.version.outputs.version }}",
                    "update_link": "https://github.com/Maxxy21/dsp-extension-hosting/releases/download/v${{ steps.version.outputs.version }}/dsp-extension-v${{ steps.version.outputs.version }}.xpi",
                    "update_hash": "sha256:${{ steps.sign.outputs.sha256 }}",
                    "applications": {
                      "gecko": {
                        "strict_min_version": "75.0"
                      }
                    }
                  }
                ]
              }
            }
          }
          EOF
          fi

      - name: Commit and push changes
        if: steps.should_release.outputs.should_release == 'true' && steps.check_release.outputs.release_exists == 'false'
        run: |
          echo "üíæ Committing changes..."
          
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Add changes
          git add docs/updates.json
          
          # Only commit manifest if version was bumped
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.version_type }}" != "use_existing" ]; then
            git add extension/manifest.json package.json
          fi
          
          # Clean up release notes file
          rm -f final_release_notes.md
          
          # Commit if there are changes
          if ! git diff --staged --quiet; then
            git commit -m "üöÄ Release v${{ steps.version.outputs.version }} [no release]

            - Updated docs/updates.json for auto-updates
            $([ '${{ github.event_name }}' = 'workflow_dispatch' ] && [ '${{ github.event.inputs.version_type }}' != 'use_existing' ] && echo '- Updated version numbers')
            
            Auto-generated by GitHub Actions"
            
            git push
          else
            echo "No changes to commit"
          fi

      - name: Deploy to GitHub Pages
        if: steps.should_release.outputs.should_release == 'true' && steps.check_release.outputs.release_exists == 'false'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
          enable_jekyll: false

      - name: Success summary
        if: steps.should_release.outputs.should_release == 'true'
        run: |
          if [ "${{ steps.check_release.outputs.release_exists }}" = "true" ]; then
            echo "‚ÑπÔ∏è Release v${{ steps.version.outputs.version }} already exists, skipped"
          else
            echo "üéâ Release v${{ steps.version.outputs.version }} completed successfully!"
            echo ""
            echo "üì¶ Release URL: https://github.com/Maxxy21/dsp-extension-hosting/releases/tag/v${{ steps.version.outputs.version }}"
            echo "üåê Download page: https://maxxy21.github.io/dsp-extension-hosting"
            echo "üîÑ Update manifest: https://maxxy21.github.io/dsp-extension-hosting/updates.json"
            echo ""
            echo "üî® Built with: NPM build system"
            echo "üìä Signing status: ${{ steps.sign.outputs.signed }}"
            echo "üìù Release notes: Custom RELEASE_NOTES.md used"
            echo ""
            echo "Users will receive automatic updates within 24 hours!"
          fi